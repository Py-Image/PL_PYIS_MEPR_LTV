{"version":3,"sources":["admin.js","wp-list-table-ajax.js"],"names":["$","location","origin","protocol","host","pyisAjaxListTable","init","timer","delay","on","event","preventDefault","this","search","query","substring","data","paged","_query","val","order","orderby","urlQuery","document","_update_url","history","replaceState","undefined","update","which","parseInt","window","clearTimeout","setTimeout","_ajax_nonce","action","ajax","type","url","ajaxurl","success","response","parseJSON","rows","length","html","column_headers","pagination","bottom","top","error","request","status","console","responseText","variable","vars","split","i","pair","key","value","hashIndex","indexOf","hash","substr","re","RegExp","separator","match","replace","jQuery"],"mappings":"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","file":"admin.js","sourcesContent":["'use strict';\n\n(function ($) {\n\n\tif (!location.origin) location.origin = location.protocol + '//' + location.host;\n\n\tvar pyisAjaxListTable = {\n\n\t\t/**\n   * Attach Events to the List Table for controling the Query\n   * \n   * @since\t\t1.0.0\n   * @return\t\tvoid\n   */\n\t\tinit: function init() {\n\n\t\t\tvar timer,\n\t\t\t    delay = 500;\n\n\t\t\t// Pagination links, sortable link\n\t\t\t$('.tablenav-pages a, .manage-column.sortable a, .manage-column.sorted a, .search-box input[type=\"submit\"]').on('click', function (event) {\n\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\tif (typeof this.search !== 'undefined') {\n\n\t\t\t\t\t// Grab variables from the URL\n\t\t\t\t\tvar query = this.search.substring(1);\n\t\t\t\t} else {\n\t\t\t\t\tvar query = '';\n\t\t\t\t}\n\n\t\t\t\t// Get the value for each variable\n\t\t\t\tvar data = {\n\t\t\t\t\tpaged: pyisAjaxListTable._query(query, 'paged') || $('input[name=\"paged\"]').val(),\n\t\t\t\t\torder: pyisAjaxListTable._query(query, 'order') || $('input[name=\"order\"]').val(),\n\t\t\t\t\torderby: pyisAjaxListTable._query(query, 'orderby') || $('input[name=\"orderby\"]').val(),\n\t\t\t\t\tsearch: pyisAjaxListTable._query(query, 's') || $('.search-box input[name=\"s\"]').val()\n\t\t\t\t};\n\n\t\t\t\t$('input[name=\"paged\"]').val(data.paged);\n\t\t\t\t$('input[name=\"order\"]').val(data.order);\n\t\t\t\t$('input[name=\"orderby\"]').val(data.orderby);\n\n\t\t\t\tvar urlQuery = document.location.search;\n\n\t\t\t\turlQuery = pyisAjaxListTable._update_url(urlQuery, 'paged', data.paged);\n\t\t\t\turlQuery = pyisAjaxListTable._update_url(urlQuery, 'order', data.order);\n\t\t\t\turlQuery = pyisAjaxListTable._update_url(urlQuery, 'orderby', data.orderby);\n\t\t\t\turlQuery = pyisAjaxListTable._update_url(urlQuery, 's', data.search);\n\n\t\t\t\t// Allows us to update the URL if the browser supports it.\n\t\t\t\t// If not, we still have those hidden inputs as a fallback\n\t\t\t\thistory.replaceState(undefined, undefined, urlQuery);\n\n\t\t\t\t// Update the table\n\t\t\t\tpyisAjaxListTable.update(data);\n\t\t\t});\n\n\t\t\t// Page number input\n\t\t\t$('input[name=paged]').on('keyup', function (event) {\n\n\t\t\t\t// If user hit enter, we don't want to submit the form\n\t\t\t\tif (event.which == 13) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\n\t\t\t\t// This time we fetch the variables in inputs\n\t\t\t\tvar data = {\n\t\t\t\t\tpaged: parseInt($('input[name=\"paged\"]').val()) || '1',\n\t\t\t\t\torder: $('input[name=\"order\"]').val() || 'asc',\n\t\t\t\t\torderby: $('input[name=\"orderby\"]').val() || 'title',\n\t\t\t\t\tsearch: $('.search-box input[name=\"s\"]').val() || ''\n\t\t\t\t};\n\n\t\t\t\t// Wait a bit to ensure the user is done typing before actually sending data\n\t\t\t\twindow.clearTimeout(timer);\n\t\t\t\ttimer = window.setTimeout(function () {\n\t\t\t\t\tpyisAjaxListTable.update(data);\n\t\t\t\t}, delay);\n\t\t\t});\n\t\t},\n\n\t\t/**\n   * Update the List Table via AJAX\n   * \n   * @param\t\t{object} data Data Object to send via AJAX\n   *                       \n   * @since\t\t1.0.0\n   * @return\t\tvoid\n   */\n\t\tupdate: function update(data) {\n\n\t\t\tdata._ajax_nonce = $('#_pyis_mepr_ltv_nonce').val();\n\t\t\tdata.action = 'pyis_mepr_ltv_list';\n\n\t\t\t$.ajax({\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: location.origin + ajaxurl,\n\t\t\t\tdata: data,\n\t\t\t\tsuccess: function success(response) {\n\n\t\t\t\t\t// WP_List_Table::ajax_response() returns json\n\t\t\t\t\tvar response = $.parseJSON(response);\n\n\t\t\t\t\t// Add the requested rows\n\t\t\t\t\tif (response.rows.length) {\n\t\t\t\t\t\t$('#the-list').html(response.rows);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update column headers for sorting\n\t\t\t\t\tif (response.column_headers.length) {\n\t\t\t\t\t\t$('thead tr, tfoot tr').html(response.column_headers);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update pagination for navigation\n\t\t\t\t\tif (response.pagination.bottom.length) {\n\t\t\t\t\t\t$('.tablenav.top .tablenav-pages').html($(response.pagination.top).html());\n\t\t\t\t\t}\n\n\t\t\t\t\tif (response.pagination.top.length) {\n\t\t\t\t\t\t$('.tablenav.bottom .tablenav-pages').html($(response.pagination.bottom).html());\n\t\t\t\t\t}\n\n\t\t\t\t\t// Init back our event handlers\n\t\t\t\t\tpyisAjaxListTable.init();\n\t\t\t\t},\n\t\t\t\terror: function error(request, status, _error) {\n\t\t\t\t\tconsole.error(request.responseText);\n\t\t\t\t\tconsole.error(_error);\n\t\t\t\t}\n\n\t\t\t});\n\t\t},\n\n\t\t/**\n   * Grab Query Parameters from the clicked-on Element\n   * \n   * @param\t\t{string}         query    URL\n   * @param \t\t{string}         variable Parameter we're checking\n   *                                    \n   * @since\t\t1.0.0\n   * @returns \t{string|boolean} Value on success, false on failure\n   */\n\t\t_query: function _query(query, variable) {\n\n\t\t\tvar vars = query.split('&');\n\n\t\t\tfor (var i = 0; i < vars.length; i++) {\n\n\t\t\t\tvar pair = vars[i].split('=');\n\n\t\t\t\tif (pair[0] == variable) {\n\t\t\t\t\treturn pair[1];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\n\t\t/**\n   * Allows updating the Query String in the URL in case we'd like to link to it\n   * \n   * @param\t\t{string} url   URL\n   * @param \t\t{string} key   Key\n   * @param \t\t{string} value Value\n   *                         \n   * @since\t\t1.0.0\n   * @returns \t{string} Updated URL\n   */\n\t\t_update_url: function _update_url(url, key, value) {\n\n\t\t\t// remove the hash part before operating on the url\n\t\t\tvar hashIndex = url.indexOf('#');\n\t\t\tvar hash = hashIndex === -1 ? '' : url.substr(hashIndex);\n\t\t\turl = hashIndex === -1 ? url : url.substr(0, hashIndex);\n\n\t\t\tvar re = new RegExp(\"([?&])\" + key + \"=.*?(&|$)\", \"i\");\n\n\t\t\tvar separator = url.indexOf('?') !== -1 ? \"&\" : \"?\";\n\n\t\t\tif (url.match(re)) {\n\t\t\t\turl = url.replace(re, '$1' + key + \"=\" + value + '$2');\n\t\t\t} else {\n\t\t\t\turl = url + separator + key + \"=\" + value;\n\t\t\t}\n\n\t\t\treturn url + hash;\n\t\t}\n\n\t};\n\n\tpyisAjaxListTable.init();\n})(jQuery);","( function( $ ) {\n\n\tif ( ! location.origin )\n\t\tlocation.origin = location.protocol + '//' + location.host;\n\n\tvar pyisAjaxListTable = {\n\n\t\t/**\n\t\t * Attach Events to the List Table for controling the Query\n\t\t * \n\t\t * @since\t\t1.0.0\n\t\t * @return\t\tvoid\n\t\t */\n\t\tinit: function() {\n\n\t\t\tvar timer,\n\t\t\t\tdelay = 500;\n\n\t\t\t// Pagination links, sortable link\n\t\t\t$( '.tablenav-pages a, .manage-column.sortable a, .manage-column.sorted a, .search-box input[type=\"submit\"]' ).on( 'click', function( event ) {\n\n\t\t\t\tevent.preventDefault();\n\t\t\t\t\n\t\t\t\tif ( typeof this.search !== 'undefined' ) {\n\n\t\t\t\t\t// Grab variables from the URL\n\t\t\t\t\tvar query = this.search.substring( 1 );\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar query = '';\n\t\t\t\t}\n\n\t\t\t\t// Get the value for each variable\n\t\t\t\tvar data = {\n\t\t\t\t\tpaged: pyisAjaxListTable._query( query, 'paged' ) || $( 'input[name=\"paged\"]' ).val(),\n\t\t\t\t\torder: pyisAjaxListTable._query( query, 'order' ) || $( 'input[name=\"order\"]' ).val(),\n\t\t\t\t\torderby: pyisAjaxListTable._query( query, 'orderby' ) || $( 'input[name=\"orderby\"]' ).val(),\n\t\t\t\t\tsearch: pyisAjaxListTable._query( query, 's' ) || $( '.search-box input[name=\"s\"]' ).val(),\n\t\t\t\t};\n\n\t\t\t\t$( 'input[name=\"paged\"]' ).val( data.paged );\n\t\t\t\t$( 'input[name=\"order\"]' ).val( data.order );\n\t\t\t\t$( 'input[name=\"orderby\"]' ).val( data.orderby );\n\n\t\t\t\tvar urlQuery = document.location.search;\n\t\t\t\t\n\t\t\t\turlQuery = pyisAjaxListTable._update_url( urlQuery, 'paged', data.paged );\n\t\t\t\turlQuery = pyisAjaxListTable._update_url( urlQuery, 'order', data.order );\n\t\t\t\turlQuery = pyisAjaxListTable._update_url( urlQuery, 'orderby', data.orderby );\n\t\t\t\turlQuery = pyisAjaxListTable._update_url( urlQuery, 's', data.search );\n\t\t\t\t\n\t\t\t\t// Allows us to update the URL if the browser supports it.\n\t\t\t\t// If not, we still have those hidden inputs as a fallback\n     \t\t\thistory.replaceState( undefined, undefined, urlQuery );\n\n\t\t\t\t// Update the table\n\t\t\t\tpyisAjaxListTable.update( data );\n\n\t\t\t} );\n\n\t\t\t// Page number input\n\t\t\t$( 'input[name=paged]' ).on( 'keyup', function( event ) {\n\n\t\t\t\t// If user hit enter, we don't want to submit the form\n\t\t\t\tif ( event.which == 13 ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\n\t\t\t\t// This time we fetch the variables in inputs\n\t\t\t\tvar data = {\n\t\t\t\t\tpaged: parseInt( $( 'input[name=\"paged\"]' ).val() ) || '1',\n\t\t\t\t\torder: $( 'input[name=\"order\"]' ).val() || 'asc',\n\t\t\t\t\torderby: $( 'input[name=\"orderby\"]' ).val() || 'title',\n\t\t\t\t\tsearch: $( '.search-box input[name=\"s\"]' ).val() || '',\n\t\t\t\t};\n\n\t\t\t\t// Wait a bit to ensure the user is done typing before actually sending data\n\t\t\t\twindow.clearTimeout( timer );\n\t\t\t\ttimer = window.setTimeout( function() {\n\t\t\t\t\tpyisAjaxListTable.update( data );\n\t\t\t\t}, delay );\n\n\t\t\t} );\n\n\t\t},\n\n\t\t/**\n\t\t * Update the List Table via AJAX\n\t\t * \n\t\t * @param\t\t{object} data Data Object to send via AJAX\n\t\t *                       \n\t\t * @since\t\t1.0.0\n\t\t * @return\t\tvoid\n\t\t */\n\t\tupdate: function( data ) {\n\n\t\t\tdata._ajax_nonce = $( '#_pyis_mepr_ltv_nonce' ).val();\n\t\t\tdata.action = 'pyis_mepr_ltv_list';\n\n\t\t\t$.ajax( {\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: location.origin + ajaxurl,\n\t\t\t\tdata: data,\n\t\t\t\tsuccess: function( response ) {\n\n\t\t\t\t\t// WP_List_Table::ajax_response() returns json\n\t\t\t\t\tvar response = $.parseJSON( response );\n\n\t\t\t\t\t// Add the requested rows\n\t\t\t\t\tif ( response.rows.length ) {\n\t\t\t\t\t\t$( '#the-list' ).html( response.rows );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update column headers for sorting\n\t\t\t\t\tif ( response.column_headers.length ) {\n\t\t\t\t\t\t$( 'thead tr, tfoot tr' ).html( response.column_headers );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update pagination for navigation\n\t\t\t\t\tif ( response.pagination.bottom.length ) {\n\t\t\t\t\t\t$( '.tablenav.top .tablenav-pages' ).html( $( response.pagination.top ).html() );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( response.pagination.top.length ) {\n\t\t\t\t\t\t$( '.tablenav.bottom .tablenav-pages' ).html( $( response.pagination.bottom ).html() );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Init back our event handlers\n\t\t\t\t\tpyisAjaxListTable.init();\n\n\t\t\t\t},\n\t\t\t\terror : function( request, status, error ) {\n\t\t\t\t\tconsole.error( request.responseText );\n\t\t\t\t\tconsole.error( error );\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t},\n\n\t\t/**\n\t\t * Grab Query Parameters from the clicked-on Element\n\t\t * \n\t\t * @param\t\t{string}         query    URL\n\t\t * @param \t\t{string}         variable Parameter we're checking\n\t\t *                                    \n\t\t * @since\t\t1.0.0\n\t\t * @returns \t{string|boolean} Value on success, false on failure\n\t\t */\n\t\t_query: function( query, variable ) {\n\n\t\t\tvar vars = query.split( '&' );\n\n\t\t\tfor ( var i = 0; i < vars.length; i++ ) {\n\n\t\t\t\tvar pair = vars[ i ].split( '=' );\n\n\t\t\t\tif ( pair[0] == variable ) {\n\t\t\t\t\treturn pair[1];\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\t/**\n\t\t * Allows updating the Query String in the URL in case we'd like to link to it\n\t\t * \n\t\t * @param\t\t{string} url   URL\n\t\t * @param \t\t{string} key   Key\n\t\t * @param \t\t{string} value Value\n\t\t *                         \n\t\t * @since\t\t1.0.0\n\t\t * @returns \t{string} Updated URL\n\t\t */\n\t\t_update_url: function( url, key, value ) {\n\t\t\t\n\t\t\t// remove the hash part before operating on the url\n\t\t\tvar hashIndex = url.indexOf( '#' );\n\t\t\tvar hash = hashIndex === -1 ? ''  : url.substr( hashIndex );\n\t\t\turl = hashIndex === -1 ? url : url.substr( 0, hashIndex );\n\n\t\t\tvar re = new RegExp( \"([?&])\" + key + \"=.*?(&|$)\", \"i\" );\n\t\t\t\n\t\t\tvar separator = url.indexOf( '?' ) !== -1 ? \"&\" : \"?\";\n\t\t\t\n\t\t\tif ( url.match( re ) ) {\n\t\t\t\turl = url.replace(re, '$1' + key + \"=\" + value + '$2');\n\t\t\t}\n\t\t\telse {\n\t\t\t\turl = url + separator + key + \"=\" + value;\n\t\t\t}\n\t\t\t\n\t\t\treturn url + hash;\n\t\t\t\n\t\t}\n\n\t}\n\n\tpyisAjaxListTable.init();\n\n} )( jQuery );"]}