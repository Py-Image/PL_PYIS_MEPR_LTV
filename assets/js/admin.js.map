{"version":3,"sources":["admin.js","wp-list-table-ajax.js"],"names":["$","location","origin","protocol","host","pyisAjaxListTable","init","timer","delay","on","event","preventDefault","query","this","search","substring","data","paged","_query","val","order","orderby","update","which","parseInt","window","clearTimeout","setTimeout","_ajax_nonce","action","ajax","type","url","ajaxurl","success","response","parseJSON","rows","length","html","column_headers","pagination","bottom","top","error","request","status","console","responseText","variable","vars","split","i","pair","jQuery"],"mappings":"AAAA,cCAA,SAAYA,GAEJC,SAASC,SACdD,SAASC,OAASD,SAASE,SAAW,KAAOF,SAASG,KAExD,IAAIC,IAKHC,KAAM,WAEL,GAAIC,GACHC,EAAQ,GAGTR,GAAG,yEAA0ES,GAAI,QAAS,SAAUC,GAEnGA,EAAMC,gBAGN,IAAIC,GAAQC,KAAKC,OAAOC,UAAW,GAG/BC,GACHC,MAAOZ,EAAkBa,OAAQN,EAAO,UAAaZ,EAAG,uBAAwBmB,MAChFC,MAAOf,EAAkBa,OAAQN,EAAO,UAAaZ,EAAG,uBAAwBmB,MAChFE,QAAShB,EAAkBa,OAAQN,EAAO,YAAeZ,EAAG,yBAA0BmB,MAGvFnB,GAAG,uBAAwBmB,IAAKH,EAAKC,OACrCjB,EAAG,uBAAwBmB,IAAKH,EAAKI,OACrCpB,EAAG,yBAA0BmB,IAAKH,EAAKK,SAGvChB,EAAkBiB,OAAQN,KAK3BhB,EAAG,qBAAsBS,GAAI,QAAS,SAAUC,GAG3B,IAAfA,EAAMa,OACVb,EAAMC,gBAIP,IAAIK,IACHC,MAAOO,SAAUxB,EAAE,uBAAuBmB,QAAW,IACrDC,MAAOpB,EAAE,uBAAuBmB,OAAS,MACzCE,QAASrB,EAAE,yBAAyBmB,OAAS,QAI9CM,QAAOC,aAAcnB,GACrBA,EAAQkB,OAAOE,WAAY,WAC1BtB,EAAkBiB,OAAQN,IACxBR,MAULc,OAAQ,SAAUN,GAEjBA,EAAKY,YAAc5B,EAAG,4BAA6BmB,MACnDH,EAAKa,OAAS,qBAEd7B,EAAE8B,MACDC,KAAM,OACNC,IAAK/B,SAASC,OAAS+B,QACvBjB,KAAMA,EACNkB,QAAS,SAAUC,GAGlB,GAAIA,GAAWnC,EAAEoC,UAAWD,EAGvBA,GAASE,KAAKC,QAClBtC,EAAG,aAAcuC,KAAMJ,EAASE,MAI5BF,EAASK,eAAeF,QAC5BtC,EAAG,sBAAuBuC,KAAMJ,EAASK,gBAIrCL,EAASM,WAAWC,OAAOJ,QAC/BtC,EAAG,iCAAkCuC,KAAMvC,EAAGmC,EAASM,WAAWE,KAAMJ,QAGpEJ,EAASM,WAAWE,IAAIL,QAC5BtC,EAAG,oCAAqCuC,KAAMvC,EAAGmC,EAASM,WAAWC,QAASH,QAI/ElC,EAAkBC,QAGnBsC,MAAQ,SAAUC,EAASC,EAAQF,GAClCG,QAAQH,MAAOC,EAAQG,cACvBD,QAAQH,MAAOA,OAalB1B,OAAQ,SAAUN,EAAOqC,GAIxB,IAAM,GAFFC,GAAOtC,EAAMuC,MAAO,KAEdC,EAAI,EAAGA,EAAIF,EAAKZ,OAAQc,IAAM,CAEvC,GAAIC,GAAOH,EAAME,GAAID,MAAO,IAE5B,IAAKE,EAAK,IAAMJ,EACf,MAAOI,GAAK,GAKd,OAAO,GAMThD,GAAkBC,QAEdgD","file":"admin.js","sourcesContent":["'use strict';\n\n(function ($) {\n\n\tif (!location.origin) location.origin = location.protocol + '//' + location.host;\n\n\tvar pyisAjaxListTable = {\n\n\t\t/**\n   * [[Description]]\n   */\n\t\tinit: function init() {\n\n\t\t\tvar timer,\n\t\t\t    delay = 500;\n\n\t\t\t// Pagination links, sortable link\n\t\t\t$('.tablenav-pages a, .manage-column.sortable a, .manage-column.sorted a').on('click', function (event) {\n\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\t// Grab variables from the URL\n\t\t\t\tvar query = this.search.substring(1);\n\n\t\t\t\t// Get the value for each variable\n\t\t\t\tvar data = {\n\t\t\t\t\tpaged: pyisAjaxListTable._query(query, 'paged') || $('input[name=\"paged\"]').val(),\n\t\t\t\t\torder: pyisAjaxListTable._query(query, 'order') || $('input[name=\"order\"]').val(),\n\t\t\t\t\torderby: pyisAjaxListTable._query(query, 'orderby') || $('input[name=\"orderby\"]').val()\n\t\t\t\t};\n\n\t\t\t\t$('input[name=\"paged\"]').val(data.paged);\n\t\t\t\t$('input[name=\"order\"]').val(data.order);\n\t\t\t\t$('input[name=\"orderby\"]').val(data.orderby);\n\n\t\t\t\t// Update the table\n\t\t\t\tpyisAjaxListTable.update(data);\n\t\t\t});\n\n\t\t\t// Page number input\n\t\t\t$('input[name=paged]').on('keyup', function (event) {\n\n\t\t\t\t// If user hit enter, we don't want to submit the form\n\t\t\t\tif (event.which == 13) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\n\t\t\t\t// This time we fetch the variables in inputs\n\t\t\t\tvar data = {\n\t\t\t\t\tpaged: parseInt($('input[name=\"paged\"]').val()) || '1',\n\t\t\t\t\torder: $('input[name=\"order\"]').val() || 'asc',\n\t\t\t\t\torderby: $('input[name=\"orderby\"]').val() || 'title'\n\t\t\t\t};\n\n\t\t\t\t// Wait a bit to ensure the user is done typing before actually sending data\n\t\t\t\twindow.clearTimeout(timer);\n\t\t\t\ttimer = window.setTimeout(function () {\n\t\t\t\t\tpyisAjaxListTable.update(data);\n\t\t\t\t}, delay);\n\t\t\t});\n\t\t},\n\n\t\t/**\n   * [[Description]]\n   * @param {object} data [[Description]]\n   */\n\t\tupdate: function update(data) {\n\n\t\t\tdata._ajax_nonce = $('#_ajax_custom_list_nonce').val();\n\t\t\tdata.action = 'pyis_mepr_ltv_list';\n\n\t\t\t$.ajax({\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: location.origin + ajaxurl,\n\t\t\t\tdata: data,\n\t\t\t\tsuccess: function success(response) {\n\n\t\t\t\t\t// WP_List_Table::ajax_response() returns json\n\t\t\t\t\tvar response = $.parseJSON(response);\n\n\t\t\t\t\t// Add the requested rows\n\t\t\t\t\tif (response.rows.length) {\n\t\t\t\t\t\t$('#the-list').html(response.rows);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update column headers for sorting\n\t\t\t\t\tif (response.column_headers.length) {\n\t\t\t\t\t\t$('thead tr, tfoot tr').html(response.column_headers);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update pagination for navigation\n\t\t\t\t\tif (response.pagination.bottom.length) {\n\t\t\t\t\t\t$('.tablenav.top .tablenav-pages').html($(response.pagination.top).html());\n\t\t\t\t\t}\n\n\t\t\t\t\tif (response.pagination.top.length) {\n\t\t\t\t\t\t$('.tablenav.bottom .tablenav-pages').html($(response.pagination.bottom).html());\n\t\t\t\t\t}\n\n\t\t\t\t\t// Init back our event handlers\n\t\t\t\t\tpyisAjaxListTable.init();\n\t\t\t\t},\n\t\t\t\terror: function error(request, status, _error) {\n\t\t\t\t\tconsole.error(request.responseText);\n\t\t\t\t\tconsole.error(_error);\n\t\t\t\t}\n\n\t\t\t});\n\t\t},\n\n\t\t/**\n   * [[Description]]\n   * @param   {string}   query    [[Description]]\n   * @param   {[[Type]]} variable [[Description]]\n   * @returns {boolean}  [[Description]]\n   */\n\t\t_query: function _query(query, variable) {\n\n\t\t\tvar vars = query.split('&');\n\n\t\t\tfor (var i = 0; i < vars.length; i++) {\n\n\t\t\t\tvar pair = vars[i].split('=');\n\n\t\t\t\tif (pair[0] == variable) {\n\t\t\t\t\treturn pair[1];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t};\n\n\tpyisAjaxListTable.init();\n})(jQuery);","( function( $ ) {\n\t\n\tif ( ! location.origin )\n\t\t\tlocation.origin = location.protocol + '//' + location.host;\n\n\tvar pyisAjaxListTable = {\n\t\t\n\t\t/**\n\t\t * [[Description]]\n\t\t */\n\t\tinit: function() {\n\n\t\t\tvar timer,\n\t\t\t\tdelay = 500;\n\n\t\t\t// Pagination links, sortable link\n\t\t\t$( '.tablenav-pages a, .manage-column.sortable a, .manage-column.sorted a' ).on( 'click', function( event ) {\n\t\t\t\t\n\t\t\t\tevent.preventDefault();\n\t\t\t\t\n\t\t\t\t// Grab variables from the URL\n\t\t\t\tvar query = this.search.substring( 1 );\n\n\t\t\t\t// Get the value for each variable\n\t\t\t\tvar data = {\n\t\t\t\t\tpaged: pyisAjaxListTable._query( query, 'paged' ) || $( 'input[name=\"paged\"]' ).val(),\n\t\t\t\t\torder: pyisAjaxListTable._query( query, 'order' ) || $( 'input[name=\"order\"]' ).val(),\n\t\t\t\t\torderby: pyisAjaxListTable._query( query, 'orderby' ) || $( 'input[name=\"orderby\"]' ).val(),\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t$( 'input[name=\"paged\"]' ).val( data.paged );\n\t\t\t\t$( 'input[name=\"order\"]' ).val( data.order );\n\t\t\t\t$( 'input[name=\"orderby\"]' ).val( data.orderby );\n\t\t\t\t\n\t\t\t\t// Update the table\n\t\t\t\tpyisAjaxListTable.update( data );\n\t\t\t\t\n\t\t\t} );\n\n\t\t\t// Page number input\n\t\t\t$( 'input[name=paged]' ).on( 'keyup', function( event ) {\n\n\t\t\t\t// If user hit enter, we don't want to submit the form\n\t\t\t\tif ( event.which == 13 ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\n\t\t\t\t// This time we fetch the variables in inputs\n\t\t\t\tvar data = {\n\t\t\t\t\tpaged: parseInt( $('input[name=\"paged\"]').val() ) || '1',\n\t\t\t\t\torder: $('input[name=\"order\"]').val() || 'asc',\n\t\t\t\t\torderby: $('input[name=\"orderby\"]').val() || 'title'\n\t\t\t\t};\n\n\t\t\t\t// Wait a bit to ensure the user is done typing before actually sending data\n\t\t\t\twindow.clearTimeout( timer );\n\t\t\t\ttimer = window.setTimeout( function() {\n\t\t\t\t\tpyisAjaxListTable.update( data );\n\t\t\t\t}, delay );\n\t\t\t\t\n\t\t\t} );\n\t\t\t\n\t\t},\n\t\t\n\t\t/**\n\t\t * [[Description]]\n\t\t * @param {object} data [[Description]]\n\t\t */\n\t\tupdate: function( data ) {\n\t\t\t\n\t\t\tdata._ajax_nonce = $( '#_ajax_custom_list_nonce' ).val();\n\t\t\tdata.action = 'pyis_mepr_ltv_list';\n\t\t\t\n\t\t\t$.ajax( {\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: location.origin + ajaxurl,\n\t\t\t\tdata: data,\n\t\t\t\tsuccess: function( response ) {\n\n\t\t\t\t\t// WP_List_Table::ajax_response() returns json\n\t\t\t\t\tvar response = $.parseJSON( response );\n\n\t\t\t\t\t// Add the requested rows\n\t\t\t\t\tif ( response.rows.length ) {\n\t\t\t\t\t\t$( '#the-list' ).html( response.rows );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Update column headers for sorting\n\t\t\t\t\tif ( response.column_headers.length ) {\n\t\t\t\t\t\t$( 'thead tr, tfoot tr' ).html( response.column_headers );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Update pagination for navigation\n\t\t\t\t\tif ( response.pagination.bottom.length ) {\n\t\t\t\t\t\t$( '.tablenav.top .tablenav-pages' ).html( $( response.pagination.top ).html() );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ( response.pagination.top.length ) {\n\t\t\t\t\t\t$( '.tablenav.bottom .tablenav-pages' ).html( $( response.pagination.bottom ).html() );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Init back our event handlers\n\t\t\t\t\tpyisAjaxListTable.init();\n\t\t\t\t\t\n\t\t\t\t},\n\t\t\t\terror : function( request, status, error ) {\n\t\t\t\t\tconsole.error( request.responseText );\n\t\t\t\t\tconsole.error( error );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} );\n\t\t\t\n\t\t},\n\t\t\n\t\t/**\n\t\t * [[Description]]\n\t\t * @param   {string}   query    [[Description]]\n\t\t * @param   {[[Type]]} variable [[Description]]\n\t\t * @returns {boolean}  [[Description]]\n\t\t */\n\t\t_query: function( query, variable ) {\n\n\t\t\tvar vars = query.split( '&' );\n\t\t\t\n\t\t\tfor ( var i = 0; i < vars.length; i++ ) {\n\t\t\t\t\n\t\t\t\tvar pair = vars[ i ].split( '=' );\n\t\t\t\t\n\t\t\t\tif ( pair[0] == variable ) {\n\t\t\t\t\treturn pair[1];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t\t\n\t\t},\n\t\t\n\t}\n\n\tpyisAjaxListTable.init();\n\n} )( jQuery );"]}