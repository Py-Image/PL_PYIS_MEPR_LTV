{"version":3,"sources":["admin.js","wp-list-table-ajax.js"],"names":["$","location","origin","protocol","host","pyisAjaxListTable","init","timer","delay","on","event","preventDefault","this","search","query","substring","data","paged","_query","val","order","orderby","s","parent","hasClass","update","which","parseInt","window","clearTimeout","setTimeout","_ajax_nonce","action","urlQuery","document","_update_url","history","replaceState","undefined","ajax","type","url","ajaxurl","success","response","hasOwnProperty","rows","length","html","column_headers","pagination","bottom","top","hover","find","css","error","request","status","console","responseText","done","effect","color","$table","removeClass","addClass","variable","vars","split","i","pair","key","value","hashIndex","indexOf","hash","substr","re","RegExp","separator","match","replace","refresh","button","currentTarget","pyisMeprLtv","i18n","flushProcessing","expiration","flushSuccess","flushDefault","flushError","jQuery"],"mappings":"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","file":"admin.js","sourcesContent":["'use strict';\n\n(function ($) {\n\n\tif (!location.origin) location.origin = location.protocol + '//' + location.host;\n\n\tvar pyisAjaxListTable = {\n\n\t\t/**\n   * Attach Events to the List Table for controling the Query\n   * \n   * @since\t\t1.0.0\n   * @return\t\tvoid\n   */\n\t\tinit: function init() {\n\n\t\t\tvar timer,\n\t\t\t    delay = 500;\n\n\t\t\t// Pagination links, sortable link\n\t\t\t$('.tablenav-pages a, .manage-column.sortable a, .manage-column.sorted a').on('click', function (event) {\n\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\tif (typeof this.search !== 'undefined') {\n\n\t\t\t\t\t// Grab variables from the URL\n\t\t\t\t\tvar query = this.search.substring(1);\n\t\t\t\t} else {\n\t\t\t\t\tvar query = '';\n\t\t\t\t}\n\n\t\t\t\t// Get the value for each variable\n\t\t\t\tvar data = {\n\t\t\t\t\tevent: 'sort',\n\t\t\t\t\tpaged: pyisAjaxListTable._query(query, 'paged') || $('input[name=\"paged\"]').val(),\n\t\t\t\t\torder: pyisAjaxListTable._query(query, 'order') || $('input[name=\"order\"]').val(),\n\t\t\t\t\torderby: pyisAjaxListTable._query(query, 'orderby') || $('input[name=\"orderby\"]').val(),\n\t\t\t\t\ts: pyisAjaxListTable._query(query, 's') || $('.search-box input[name=\"s\"]').val()\n\t\t\t\t};\n\n\t\t\t\t// In this case, we send a different event\n\t\t\t\tif ($(this).parent().hasClass('pagination-links')) {\n\t\t\t\t\tdata.event = 'paginate';\n\t\t\t\t}\n\n\t\t\t\t// Reset to page one if we're intentionally navigating to the first page\n\t\t\t\tif ($(this).hasClass('first-page')) {\n\t\t\t\t\tdata.paged = 1;\n\t\t\t\t}\n\n\t\t\t\t// Update the table\n\t\t\t\tpyisAjaxListTable.update(data);\n\t\t\t});\n\n\t\t\t// Page number input\n\t\t\t$('input[name=paged]').on('keyup', function (event) {\n\n\t\t\t\t// If user hit enter, we don't want to submit the form\n\t\t\t\tif (event.which == 13) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\n\t\t\t\t// This time we fetch the variables in inputs\n\t\t\t\tvar data = {\n\t\t\t\t\tevent: 'typed_page',\n\t\t\t\t\tpaged: parseInt($(this).val()) || 1,\n\t\t\t\t\torder: $('input[name=\"order\"]').val() || 'asc',\n\t\t\t\t\torderby: $('input[name=\"orderby\"]').val() || 'title',\n\t\t\t\t\ts: $('.search-box input[name=\"s\"]').val() || ''\n\t\t\t\t};\n\n\t\t\t\t// Wait a bit to ensure the user is done typing before actually sending data\n\t\t\t\twindow.clearTimeout(timer);\n\t\t\t\ttimer = window.setTimeout(function () {\n\n\t\t\t\t\tpyisAjaxListTable.update(data);\n\t\t\t\t}, delay);\n\t\t\t});\n\t\t},\n\n\t\t/**\n   * Update the List Table via AJAX\n   * \n   * @param\t\t{object} data Data Object to send via AJAX\n   *                       \n   * @since\t\t1.0.0\n   * @return\t\tvoid\n   */\n\t\tupdate: function update(data) {\n\n\t\t\tdata._ajax_nonce = $('#_pyis_mepr_ltv_nonce').val();\n\t\t\tdata.action = 'pyis_mepr_ltv_list';\n\n\t\t\t// Define the values of these hidden fields based on the Data so different actions can default to them\n\t\t\t$('input[name=\"paged\"]').val(data.paged);\n\t\t\t$('input[name=\"order\"]').val(data.order);\n\t\t\t$('input[name=\"orderby\"]').val(data.orderby);\n\n\t\t\tvar urlQuery = document.location.search;\n\n\t\t\turlQuery = pyisAjaxListTable._update_url(urlQuery, 'paged', data.paged);\n\t\t\turlQuery = pyisAjaxListTable._update_url(urlQuery, 'order', data.order);\n\t\t\turlQuery = pyisAjaxListTable._update_url(urlQuery, 'orderby', data.orderby);\n\t\t\turlQuery = pyisAjaxListTable._update_url(urlQuery, 's', data.s);\n\n\t\t\t// Allows us to update the URL if the browser supports it.\n\t\t\t// If not, we still have those hidden inputs as a fallback\n\t\t\thistory.replaceState(undefined, undefined, urlQuery);\n\n\t\t\t$.ajax({\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: location.origin + ajaxurl,\n\t\t\t\tdata: data,\n\t\t\t\tsuccess: function success(response) {\n\n\t\t\t\t\tif (response.success && response.hasOwnProperty('data')) {\n\n\t\t\t\t\t\tresponse = response.data;\n\n\t\t\t\t\t\t// Add the requested rows\n\t\t\t\t\t\tif (response.rows.length) {\n\t\t\t\t\t\t\t$('#the-list').html(response.rows);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Update column headers for sorting\n\t\t\t\t\t\tif (response.column_headers.length) {\n\t\t\t\t\t\t\t$('thead tr, tfoot tr').html(response.column_headers);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Update pagination for navigation\n\t\t\t\t\t\tif (response.pagination.bottom.length) {\n\t\t\t\t\t\t\t$('.tablenav.top .tablenav-pages').html($(response.pagination.top).html());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (response.pagination.top.length) {\n\t\t\t\t\t\t\t$('.tablenav.bottom .tablenav-pages').html($(response.pagination.bottom).html());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// This bit is directly from MemberPress, but we need to reattach the event after recreating the Table\n\t\t\t\t\t\t$('table.wp-list-table tr').hover(function (event) {\n\t\t\t\t\t\t\t$(this).find('.mepr-row-actions').css('visibility', 'visible');\n\t\t\t\t\t\t}, function (event) {\n\t\t\t\t\t\t\t$(this).find('.mepr-row-actions').css('visibility', 'hidden');\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Init back our event handlers\n\t\t\t\t\t\tpyisAjaxListTable.init();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\terror: function error(request, status, _error) {\n\n\t\t\t\t\tconsole.error(request.responseText);\n\t\t\t\t\tconsole.error(_error);\n\t\t\t\t}\n\n\t\t\t}).done(function (response) {\n\n\t\t\t\tif (response.success && response.hasOwnProperty('data')) {\n\n\t\t\t\t\tif (data.event == 'sort') {\n\n\t\t\t\t\t\t$('.column-' + data.orderby).effect('highlight', { color: '#DFF2BF' }, 1000);\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar $table = $('.wp-list-table');\n\n\t\t\t\t\t\t// Ensure the highlight can be seen on each row\n\t\t\t\t\t\t$table.removeClass('striped');\n\n\t\t\t\t\t\t$table.find('tbody#the-list').effect('highlight', { color: '#DFF2BF' }, 1000, function () {\n\t\t\t\t\t\t\t$table.addClass('striped');\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n   * Grab Query Parameters from the clicked-on Element\n   * \n   * @param\t\t{string}         query    URL\n   * @param \t\t{string}         variable Parameter we're checking\n   *                                    \n   * @since\t\t1.0.0\n   * @returns \t{string|boolean} Value on success, false on failure\n   */\n\t\t_query: function _query(query, variable) {\n\n\t\t\tvar vars = query.split('&');\n\n\t\t\tfor (var i = 0; i < vars.length; i++) {\n\n\t\t\t\tvar pair = vars[i].split('=');\n\n\t\t\t\tif (pair[0] == variable) {\n\t\t\t\t\treturn pair[1];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\n\t\t/**\n   * Allows updating the Query String in the URL in case we'd like to link to it\n   * \n   * @param\t\t{string} url   URL\n   * @param \t\t{string} key   Key\n   * @param \t\t{string} value Value\n   *                         \n   * @since\t\t1.0.0\n   * @returns \t{string} Updated URL\n   */\n\t\t_update_url: function _update_url(url, key, value) {\n\n\t\t\t// remove the hash part before operating on the url\n\t\t\tvar hashIndex = url.indexOf('#');\n\t\t\tvar hash = hashIndex === -1 ? '' : url.substr(hashIndex);\n\t\t\turl = hashIndex === -1 ? url : url.substr(0, hashIndex);\n\n\t\t\tvar re = new RegExp(\"([?&])\" + key + \"=.*?(&|$)\", \"i\");\n\n\t\t\tvar separator = url.indexOf('?') !== -1 ? \"&\" : \"?\";\n\n\t\t\tif (url.match(re) && value !== '') {\n\t\t\t\turl = url.replace(re, '$1' + key + \"=\" + value + '$2');\n\t\t\t} else if (value == '') {\n\t\t\t\turl = url.replace(re, '');\n\t\t\t} else {\n\t\t\t\turl = url + separator + key + \"=\" + value;\n\t\t\t}\n\n\t\t\treturn url + hash;\n\t\t},\n\n\t\t/**\n   * Clear out the Transient and Update the Table\n   * \n   * @since\t\t1.0.0\n   * @return\t\tvoid\n   */\n\t\trefresh: function refresh(event) {\n\n\t\t\tvar button = event.currentTarget,\n\t\t\t    defaultText = $(button).val();\n\n\t\t\t$(button).val(pyisMeprLtv.i18n.flushProcessing);\n\n\t\t\tvar data = {\n\t\t\t\t_ajax_nonce: $('#_pyis_mepr_ltv_nonce').val(),\n\t\t\t\taction: 'pyis_mepr_ltv_flush'\n\t\t\t};\n\n\t\t\t$.ajax({\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: location.origin + ajaxurl,\n\t\t\t\tdata: data,\n\t\t\t\tsuccess: function success(response) {\n\n\t\t\t\t\tif (response.success && response.hasOwnProperty('data')) {\n\n\t\t\t\t\t\tresponse = response.data;\n\n\t\t\t\t\t\t$('.transient-expiration').html(response.expiration);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\terror: function error(request, status, _error2) {\n\t\t\t\t\tconsole.error(request.responseText);\n\t\t\t\t\tconsole.error(_error2);\n\t\t\t\t}\n\n\t\t\t}).done(function (response) {\n\n\t\t\t\tif (response.success === true && response.hasOwnProperty('data')) {\n\n\t\t\t\t\t$(button).val(pyisMeprLtv.i18n.flushSuccess);\n\n\t\t\t\t\t$('.transient-expiration').effect('highlight', { color: '#DFF2BF' }, 1000);\n\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t$(button).val(pyisMeprLtv.i18n.flushDefault);\n\t\t\t\t\t}, 1000);\n\t\t\t\t} else {\n\n\t\t\t\t\t$(button).val(pyisMeprLtv.i18n.flushError);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Ensure that the current view is preserved\n\t\t\tdata.paged = $('input[name=\"paged\"]').val();\n\t\t\tdata.order = $('input[name=\"order\"]').val();\n\t\t\tdata.orderby = $('input[name=\"orderby\"]').val();\n\t\t\tdata.s = $('.search-box input[name=\"s\"]').val();\n\t\t\tdata.event = 'flush';\n\n\t\t\t// Update using the refreshed data\n\t\t\tpyisAjaxListTable.update(data);\n\t\t}\n\n\t};\n\n\t// Bind events for all items that get removed on Table Redraws\n\tpyisAjaxListTable.init();\n\n\t/**\n  * Search for specific Users by Name, Login, or Email\n  * This Event needs to be bound outside of the init() function otherwise it will get rebound constantly\n  * \n  * @since\t\t1.0.0\n  * @return\t\tvoid\n  */\n\t$('#pyis-mepr-ltv-table').on('submit', function (event) {\n\n\t\tevent.preventDefault();\n\n\t\t// This time we fetch the variables in inputs\n\t\t// Except we always go to Page 1\n\t\tvar data = {\n\t\t\tevent: 'search',\n\t\t\tpaged: 1,\n\t\t\torder: $('input[name=\"order\"]').val() || 'asc',\n\t\t\torderby: $('input[name=\"orderby\"]').val() || 'title',\n\t\t\ts: $('.search-box input[name=\"s\"]').val() || ''\n\t\t};\n\n\t\t// Update the table\n\t\tpyisAjaxListTable.update(data);\n\t});\n\n\t/** \n  * Clear the Transient Data and refresh the Table\n  * This Event needs to be bound outside of the init() function otherwise it will get rebound constantly\n  * \n  * @since\t\t1.0.0\n  * @return\t\tvoid\n  */\n\t$('.flush-transients.button').on('click', function (event) {\n\n\t\tevent.preventDefault();\n\n\t\tpyisAjaxListTable.refresh(event);\n\t});\n})(jQuery);","( function( $ ) {\n\n\tif ( ! location.origin )\n\t\tlocation.origin = location.protocol + '//' + location.host;\n\n\tvar pyisAjaxListTable = {\n\n\t\t/**\n\t\t * Attach Events to the List Table for controling the Query\n\t\t * \n\t\t * @since\t\t1.0.0\n\t\t * @return\t\tvoid\n\t\t */\n\t\tinit: function() {\n\n\t\t\tvar timer,\n\t\t\t\tdelay = 500;\n\n\t\t\t// Pagination links, sortable link\n\t\t\t$( '.tablenav-pages a, .manage-column.sortable a, .manage-column.sorted a' ).on( 'click', function( event ) {\n\n\t\t\t\tevent.preventDefault();\n\t\t\t\t\n\t\t\t\tif ( typeof this.search !== 'undefined' ) {\n\n\t\t\t\t\t// Grab variables from the URL\n\t\t\t\t\tvar query = this.search.substring( 1 );\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar query = '';\n\t\t\t\t}\n\n\t\t\t\t// Get the value for each variable\n\t\t\t\tvar data = {\n\t\t\t\t\tevent: 'sort',\n\t\t\t\t\tpaged: pyisAjaxListTable._query( query, 'paged' ) || $( 'input[name=\"paged\"]' ).val(),\n\t\t\t\t\torder: pyisAjaxListTable._query( query, 'order' ) || $( 'input[name=\"order\"]' ).val(),\n\t\t\t\t\torderby: pyisAjaxListTable._query( query, 'orderby' ) || $( 'input[name=\"orderby\"]' ).val(),\n\t\t\t\t\ts: pyisAjaxListTable._query( query, 's' ) || $( '.search-box input[name=\"s\"]' ).val(),\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// In this case, we send a different event\n\t\t\t\tif ( $( this ).parent().hasClass( 'pagination-links' ) ) {\n\t\t\t\t\tdata.event = 'paginate';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Reset to page one if we're intentionally navigating to the first page\n\t\t\t\tif ( $( this ).hasClass( 'first-page' ) ) {\n\t\t\t\t\tdata.paged = 1;\n\t\t\t\t}\n\n\t\t\t\t// Update the table\n\t\t\t\tpyisAjaxListTable.update( data );\n\n\t\t\t} );\n\n\t\t\t// Page number input\n\t\t\t$( 'input[name=paged]' ).on( 'keyup', function( event ) {\n\n\t\t\t\t// If user hit enter, we don't want to submit the form\n\t\t\t\tif ( event.which == 13 ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\n\t\t\t\t// This time we fetch the variables in inputs\n\t\t\t\tvar data = {\n\t\t\t\t\tevent: 'typed_page',\n\t\t\t\t\tpaged: parseInt( $( this ).val() ) || 1,\n\t\t\t\t\torder: $( 'input[name=\"order\"]' ).val() || 'asc',\n\t\t\t\t\torderby: $( 'input[name=\"orderby\"]' ).val() || 'title',\n\t\t\t\t\ts: $( '.search-box input[name=\"s\"]' ).val() || '',\n\t\t\t\t};\n\n\t\t\t\t// Wait a bit to ensure the user is done typing before actually sending data\n\t\t\t\twindow.clearTimeout( timer );\n\t\t\t\ttimer = window.setTimeout( function() {\n\t\t\t\t\t\n\t\t\t\t\tpyisAjaxListTable.update( data );\n\t\t\t\t\t\n\t\t\t\t}, delay );\n\n\t\t\t} );\n\n\t\t},\n\n\t\t/**\n\t\t * Update the List Table via AJAX\n\t\t * \n\t\t * @param\t\t{object} data Data Object to send via AJAX\n\t\t *                       \n\t\t * @since\t\t1.0.0\n\t\t * @return\t\tvoid\n\t\t */\n\t\tupdate: function( data ) {\n\n\t\t\tdata._ajax_nonce = $( '#_pyis_mepr_ltv_nonce' ).val();\n\t\t\tdata.action = 'pyis_mepr_ltv_list';\n\t\t\t\n\t\t\t// Define the values of these hidden fields based on the Data so different actions can default to them\n\t\t\t$( 'input[name=\"paged\"]' ).val( data.paged );\n\t\t\t$( 'input[name=\"order\"]' ).val( data.order );\n\t\t\t$( 'input[name=\"orderby\"]' ).val( data.orderby );\n\t\t\t\n\t\t\tvar urlQuery = document.location.search;\n\t\t\t\t\n\t\t\turlQuery = pyisAjaxListTable._update_url( urlQuery, 'paged', data.paged );\n\t\t\turlQuery = pyisAjaxListTable._update_url( urlQuery, 'order', data.order );\n\t\t\turlQuery = pyisAjaxListTable._update_url( urlQuery, 'orderby', data.orderby );\n\t\t\turlQuery = pyisAjaxListTable._update_url( urlQuery, 's', data.s );\n\n\t\t\t// Allows us to update the URL if the browser supports it.\n\t\t\t// If not, we still have those hidden inputs as a fallback\n\t\t\thistory.replaceState( undefined, undefined, urlQuery );\n\n\t\t\t$.ajax( {\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: location.origin + ajaxurl,\n\t\t\t\tdata: data,\n\t\t\t\tsuccess: function( response ) {\n\t\t\t\t\t\n\t\t\t\t\tif ( response.success && \n\t\t\t\t\t\tresponse.hasOwnProperty( 'data' ) ) {\n\t\t\t\t\t\n\t\t\t\t\t\tresponse = response.data;\n\n\t\t\t\t\t\t// Add the requested rows\n\t\t\t\t\t\tif ( response.rows.length ) {\n\t\t\t\t\t\t\t$( '#the-list' ).html( response.rows );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Update column headers for sorting\n\t\t\t\t\t\tif ( response.column_headers.length ) {\n\t\t\t\t\t\t\t$( 'thead tr, tfoot tr' ).html( response.column_headers );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Update pagination for navigation\n\t\t\t\t\t\tif ( response.pagination.bottom.length ) {\n\t\t\t\t\t\t\t$( '.tablenav.top .tablenav-pages' ).html( $( response.pagination.top ).html() );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( response.pagination.top.length ) {\n\t\t\t\t\t\t\t$( '.tablenav.bottom .tablenav-pages' ).html( $( response.pagination.bottom ).html() );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// This bit is directly from MemberPress, but we need to reattach the event after recreating the Table\n\t\t\t\t\t\t$( 'table.wp-list-table tr' ).hover(\n\t\t\t\t\t\t\tfunction( event ) {\n\t\t\t\t\t\t\t\t$( this ).find( '.mepr-row-actions' ).css( 'visibility', 'visible' );\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tfunction( event ) {\n\t\t\t\t\t\t\t\t$( this ).find( '.mepr-row-actions' ).css( 'visibility', 'hidden' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// Init back our event handlers\n\t\t\t\t\t\tpyisAjaxListTable.init();\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\terror: function( request, status, error ) {\n\t\t\t\t\t\n\t\t\t\t\tconsole.error( request.responseText );\n\t\t\t\t\tconsole.error( error );\n\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.done( function( response ) {\n\t\t\t\t\n\t\t\t\tif ( response.success && \n\t\t\t\t\tresponse.hasOwnProperty( 'data' ) ) {\n\t\t\t\t\t\n\t\t\t\t\tif ( data.event == 'sort' ) {\n\t\t\t\t\t\n\t\t\t\t\t\t$( '.column-' + data.orderby ).effect( 'highlight', { color : '#DFF2BF' }, 1000 );\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar $table = $( '.wp-list-table' );\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Ensure the highlight can be seen on each row\n\t\t\t\t\t\t$table.removeClass( 'striped' );\n\t\t\t\t\t\t\n\t\t\t\t\t\t$table.find( 'tbody#the-list' ).effect( 'highlight', { color : '#DFF2BF' }, 1000, function() {\n\t\t\t\t\t\t\t$table.addClass( 'striped' );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} );\n\n\t\t},\n\n\t\t/**\n\t\t * Grab Query Parameters from the clicked-on Element\n\t\t * \n\t\t * @param\t\t{string}         query    URL\n\t\t * @param \t\t{string}         variable Parameter we're checking\n\t\t *                                    \n\t\t * @since\t\t1.0.0\n\t\t * @returns \t{string|boolean} Value on success, false on failure\n\t\t */\n\t\t_query: function( query, variable ) {\n\n\t\t\tvar vars = query.split( '&' );\n\n\t\t\tfor ( var i = 0; i < vars.length; i++ ) {\n\n\t\t\t\tvar pair = vars[ i ].split( '=' );\n\n\t\t\t\tif ( pair[0] == variable ) {\n\t\t\t\t\treturn pair[1];\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\t/**\n\t\t * Allows updating the Query String in the URL in case we'd like to link to it\n\t\t * \n\t\t * @param\t\t{string} url   URL\n\t\t * @param \t\t{string} key   Key\n\t\t * @param \t\t{string} value Value\n\t\t *                         \n\t\t * @since\t\t1.0.0\n\t\t * @returns \t{string} Updated URL\n\t\t */\n\t\t_update_url: function( url, key, value ) {\n\t\t\t\n\t\t\t// remove the hash part before operating on the url\n\t\t\tvar hashIndex = url.indexOf( '#' );\n\t\t\tvar hash = hashIndex === -1 ? ''  : url.substr( hashIndex );\n\t\t\turl = hashIndex === -1 ? url : url.substr( 0, hashIndex );\n\n\t\t\tvar re = new RegExp( \"([?&])\" + key + \"=.*?(&|$)\", \"i\" );\n\t\t\t\n\t\t\tvar separator = url.indexOf( '?' ) !== -1 ? \"&\" : \"?\";\n\t\t\t\n\t\t\tif ( url.match( re ) && value !== '' ) {\n\t\t\t\turl = url.replace( re, '$1' + key + \"=\" + value + '$2' );\n\t\t\t}\n\t\t\telse if ( value == '' ) {\n\t\t\t\turl = url.replace( re, '' );\n\t\t\t}\n\t\t\telse {\n\t\t\t\turl = url + separator + key + \"=\" + value;\n\t\t\t}\n\t\t\t\n\t\t\treturn url + hash;\n\t\t\t\n\t\t},\n\t\t\n\t\t/**\n\t\t * Clear out the Transient and Update the Table\n\t\t * \n\t\t * @since\t\t1.0.0\n\t\t * @return\t\tvoid\n\t\t */\n\t\trefresh: function( event ) {\n\t\t\t\n\t\t\tvar button = event.currentTarget,\n\t\t\t\tdefaultText = $( button ).val();\n\t\t\t\n\t\t\t$( button ).val( pyisMeprLtv.i18n.flushProcessing );\n\t\t\t\n\t\t\tvar data = {\n\t\t\t\t_ajax_nonce: $( '#_pyis_mepr_ltv_nonce' ).val(),\n\t\t\t\taction: 'pyis_mepr_ltv_flush',\n\t\t\t};\n\t\t\t\n\t\t\t$.ajax( {\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: location.origin + ajaxurl,\n\t\t\t\tdata: data,\n\t\t\t\tsuccess: function( response ) {\n\t\t\t\t\t\n\t\t\t\t\tif ( response.success && \n\t\t\t\t\t\tresponse.hasOwnProperty( 'data' ) ) {\n\t\t\t\t\t\n\t\t\t\t\t\tresponse = response.data;\n\t\t\t\t\t\n\t\t\t\t\t\t$( '.transient-expiration' ).html( response.expiration );\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\terror : function( request, status, error ) {\n\t\t\t\t\tconsole.error( request.responseText );\n\t\t\t\t\tconsole.error( error );\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.done( function( response ) {\n\t\t\t\t\n\t\t\t\tif ( response.success === true && \n\t\t\t\t\tresponse.hasOwnProperty( 'data' ) ) {\n\t\t\t\t\t\n\t\t\t\t\t$( button ).val( pyisMeprLtv.i18n.flushSuccess );\n\t\t\t\t\t\n\t\t\t\t\t$( '.transient-expiration' ).effect( 'highlight', { color : '#DFF2BF' }, 1000 );\n\t\t\t\t\t\n\t\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t\t$( button ).val( pyisMeprLtv.i18n.flushDefault );\n\t\t\t\t\t}, 1000 );\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t\n\t\t\t\t\t$( button ).val( pyisMeprLtv.i18n.flushError );\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} );\n\t\t\t\n\t\t\t// Ensure that the current view is preserved\n\t\t\tdata.paged = $( 'input[name=\"paged\"]' ).val();\n\t\t\tdata.order = $( 'input[name=\"order\"]' ).val();\n\t\t\tdata.orderby = $( 'input[name=\"orderby\"]' ).val();\n\t\t\tdata.s = $( '.search-box input[name=\"s\"]' ).val();\n\t\t\tdata.event = 'flush';\n\t\t\t\n\t\t\t// Update using the refreshed data\n\t\t\tpyisAjaxListTable.update( data );\n\t\t\t\n\t\t}\n\n\t}\n\n\t// Bind events for all items that get removed on Table Redraws\n\tpyisAjaxListTable.init();\n\t\t\t\n\t/**\n\t * Search for specific Users by Name, Login, or Email\n\t * This Event needs to be bound outside of the init() function otherwise it will get rebound constantly\n\t * \n\t * @since\t\t1.0.0\n\t * @return\t\tvoid\n\t */\n\t$( '#pyis-mepr-ltv-table' ).on( 'submit', function( event ) {\n\n\t\tevent.preventDefault();\n\n\t\t// This time we fetch the variables in inputs\n\t\t// Except we always go to Page 1\n\t\tvar data = {\n\t\t\tevent: 'search',\n\t\t\tpaged: 1,\n\t\t\torder: $( 'input[name=\"order\"]' ).val() || 'asc',\n\t\t\torderby: $( 'input[name=\"orderby\"]' ).val() || 'title',\n\t\t\ts: $( '.search-box input[name=\"s\"]' ).val() || '',\n\t\t};\n\n\t\t// Update the table\n\t\tpyisAjaxListTable.update( data );\n\n\t} );\n\t\n\t/** \n\t * Clear the Transient Data and refresh the Table\n\t * This Event needs to be bound outside of the init() function otherwise it will get rebound constantly\n\t * \n\t * @since\t\t1.0.0\n\t * @return\t\tvoid\n\t */\n\t$( '.flush-transients.button' ).on( 'click', function( event ) {\n\n\t\tevent.preventDefault();\n\n\t\tpyisAjaxListTable.refresh( event );\n\n\t} );\n\n} )( jQuery );"]}